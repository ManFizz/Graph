using System;
using System.IO;
using System.Collections.Generic;

namespace Lab_4
{
    class Graph
{
    private List<Node> vertexes_;
        
    class Node
    {
        public string name;
        private List<string> neighbours_;
            
        public Node(string parse)
        {
            char[] delims =
            {
                    ':',
                    ','
                };
            string[] parseResult = parse.Split(delims);
            name = parseResult[0];
            neighbours_ = new List<string>();
            for (int i = 1; i < parseResult.Length; i++)
            {
                neighbours_.Add(parseResult[i]);
            }

        }
            
        public void print()
        {
            if (neighbours_.Count == 0)
            {
                Console.WriteLine("- Вершина {0} не имеет исходящих дуг.", name);
                return;
            }

            Console.WriteLine("- Вершина {0}:", name);
            Console.WriteLine("Исходящие дуги:");
            foreach (var i in neighbours_)
            {
                Console.WriteLine("{0} -> {1}", name, i);
            }
        }
            
        public void addEdge(string newEdge)
        {
            neighbours_.Add(newEdge);
        }
            
        public void deleteEdge(string deletedEdge)
        {
            while (neighbours_.Remove(deletedEdge)) ;
        }
            
        public bool findLoop()
        {
            foreach (var i in neighbours_)
            {
                if (name == i)
                {
                    return true;
                }
            }
            return false;
        }
    }
        
    public Graph()
    {
        vertexes_ = new List<Node>();
    }
        
    public Graph(string filename)
    {
        vertexes_ = new List<Node>();
        StreamReader fileReader = new StreamReader(filename);
        string stringBuff;
        while ((stringBuff = fileReader.ReadLine()) != null)
        {
            addNode(stringBuff);
        }
    }
        
    public Graph(Graph source)
    {
        vertexes_ = new List<Node>();
        foreach (var i in source.vertexes_)
        {
            vertexes_.Add(i);
        }
    }

    public Graph(int num)
    {
        vertexes_ = new List<Node>();
        string buff;
        for (int i = 0; i < num; i++)
        {
            buff = Convert.ToString(i) + ":";
            for (int j = 0; j < num; j++)
            {
                if (j != i)
                {
                    buff += Convert.ToString(j) + ',';
                }
            }
            if (buff[buff.Length - 1] == ',')
            {
                buff = buff.Remove(buff.Length - 1);
            }
            addNode(buff);
        }
    }

    public void addNode(string parse)
    {
        vertexes_.Add(new Node(parse));
    }

   public void deleteNode(string nodeName)
    {
        for (var i = 0; i < vertexes_.Count; i++)
        {
            if (nodeName == vertexes_[i].name)
                vertexes_.Remove(vertexes_[i--]);
            else
                vertexes_[i].deleteEdge(nodeName);

        }
    }
        
    public void addEdge(string sourceNode, string destinationNode)
    {
        vertexes_.Find(element => element.name == sourceNode).addEdge(destinationNode);
    }
        
    public void deleteEdge(string sourceNode, string destinationNode)
    {
        vertexes_.Find(element => element.name == sourceNode).deleteEdge(destinationNode);
    }
        
    public void print()
    {
        Console.WriteLine("Ориентированный граф:");
        foreach (var i in vertexes_)
            i.print();
        Console.WriteLine();
    }
        
    public void printLoopVertexes()
    {
        Console.WriteLine("Поиск петель в ориентированном графе...");
        bool anyLoopsFound = false;
        foreach (var i in vertexes_)
        {
            if (i.findLoop())
            {
                Console.WriteLine("Вершина {0} имеет одну или несколько петель.", i.name);
                anyLoopsFound = true;
            }
        }

        if (!anyLoopsFound)
            Console.WriteLine("Граф не содержит петель.");

        Console.WriteLine();
    }

}

class Program
{
    static void Main(string[] args)
    {
        Graph myGraph = new Graph("C:\\Users\\Mak\\OneDrive\\Рабочий стол\\Учеба\\Фундаменталка\\Lab_4\\input1.txt");
        myGraph.print();
        myGraph.printLoopVertexes();

        myGraph.deleteNode("a");
        myGraph.print();
        myGraph.printLoopVertexes();

        Graph secondGraph = new Graph(myGraph);
        secondGraph.deleteEdge("b", "b");
        secondGraph.deleteEdge("b", "c");
        secondGraph.print();
        secondGraph.printLoopVertexes();

        Graph thirdGraph = new Graph(5);
        thirdGraph.print();

        Console.WriteLine("Нажмите любую клавишу...");
        Console.ReadKey();
    }
}
}